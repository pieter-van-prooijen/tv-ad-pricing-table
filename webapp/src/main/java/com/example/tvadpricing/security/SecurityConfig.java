package com.example.tvadpricing.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

/**
 * Configure various aspects of Spring security: users, authentication method etc.
 */
@Configuration
@EnableGlobalMethodSecurity(securedEnabled = true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    // The spring role voter expects roles to start with "ROLE_";
    public static final String USER_ROLE = "ROLE_USER";
    public static final String ADMIN_ROLE = "ROLE_ADMIN";

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        // FIXME: Disable CSRF protection when using the jars upload, because the form is not generated by Spring
        // (no token is available to add to the request)
        http.httpBasic().and()
                .authorizeRequests().antMatchers("/logout.html").permitAll().and()
                .authorizeRequests().antMatchers("/index.html", "/").authenticated().and()
                .authorizeRequests().antMatchers("/admin.html").hasRole("ADMIN").and()
                .csrf().disable();
    }

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder authArg) throws Exception {
        authArg.inMemoryAuthentication()
                .withUser("user").password("user-password").authorities(USER_ROLE).and()
                .withUser("admin").password("admin-password").authorities(ADMIN_ROLE);
    }
}
